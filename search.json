[
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "Archivematica API client",
    "section": "",
    "text": "source\n\nArchivematicaAPIClient\n\n ArchivematicaAPIClient (dashboard_url:str, dashboard_username:str,\n                         dashboard_api_key:str, storage_service_url:str,\n                         storage_service_username:str,\n                         storage_service_password:str)\n\nA client for interacting with Matica’s API for file uploading, transferring, and ingesting processes.\nFirst import the ArchivematicaAPIClient class.\nfrom archivematica_tools.api import ArchivematicaAPIClient\nTo initialise the ArchivematicaAPIClient you need to provide the options.\n.env file\nDASHBOARD_URL=http://localhost:62080\nDASHBOARD_USERNAME=test\nDASHBOARD_API_KEY=test\n\nSTORAGE_SERVICE_URL=http://localhost:62081\nSTORAGE_SERVICE_USERNAME=test\nSTORAGE_SERVICE_PASSWORD=test\n# 環境変数を参照\ndashboard_url = os.environ.get(\"DASHBOARD_URL\")\ndashboard_username = os.environ.get(\"DASHBOARD_USERNAME\")\ndashboard_api_key = os.environ.get(\"DASHBOARD_API_KEY\")\n\nstorage_service_url = os.environ.get(\"STORAGE_SERVICE_URL\")\nstorage_service_username = os.environ.get(\"STORAGE_SERVICE_USERNAME\")\nstorage_service_password = os.environ.get(\"STORAGE_SERVICE_PASSWORD\")\n\naws_access_key_id = os.environ.get(\"AWS_ACCESS_KEY_ID\")\naws_secret_access_key = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nmatica = ArchivematicaAPIClient(dashboard_url, dashboard_username, dashboard_api_key, storage_service_url, storage_service_username, storage_service_password)\n\n\nTransfer\nInitiates a file transfer process.\n\nsource\n\nArchivematicaAPIClient.v2beta_package\n\n ArchivematicaAPIClient.v2beta_package (transfer_type:str,\n                                        transfer_accession:str,\n                                        location_uuid:str, path:str,\n                                        name:str, processing_config:str)\n\n*Initiates a file transfer process.\nArgs: transfer_type: The type of the transfer. transfer_accession: The accession number for the transfer.\nReturns: The directory associated with the transfer.*\n\nsource\n\n\nArchivematicaAPIClient.approve_transfer\n\n ArchivematicaAPIClient.approve_transfer (transfer_type:str,\n                                          directory:str)\n\n*Approves a file transfer after initiation.\nArgs: transfer_type (str): The type of the transfer. directory (str): The directory associated with the transfer.\nReturns: Optional[str]: The UUID of the approved transfer, if available.*\n\nsource\n\n\nArchivematicaAPIClient.check_transfer_status\n\n ArchivematicaAPIClient.check_transfer_status (transfer_UUID:str)\n\n*Checks the status of a file transfer until it is no longer processing.\nArgs: transfer_UUID: The UUID of the transfer to check.\nReturns: The SIP UUID of the transfer.*\n\nsource\n\n\nArchivematicaAPIClient.transfer_delete\n\n ArchivematicaAPIClient.transfer_delete (transfer_UUIDs:list)\n\n*Deletes the specified transfers.\nArgs: transfer_UUIDs: The list of transfer UUIDs to delete.\nReturns: The results of the deletion.*\n\nsource\n\n\nArchivematicaAPIClient.transfer_completed\n\n ArchivematicaAPIClient.transfer_completed ()\n\n*Checks for completed transfers.\nReturns: The list of completed transfers.*\n\n\n\nIngest\n\nsource\n\nArchivematicaAPIClient.ingest\n\n ArchivematicaAPIClient.ingest (sip_UUID:str)\n\n*Waits for the ingestion process to complete and returns the UUID of the ingested AIP.\nArgs: sip_UUID: The SIP UUID to ingest.\nReturns: The UUID of the ingested AIP.*\n\nsource\n\n\nArchivematicaAPIClient.ingest_delete\n\n ArchivematicaAPIClient.ingest_delete (ingest_UUIDs:list)\n\n*Deletes the specified ingestions.\nArgs: ingest_UUIDs: The list of ingest UUIDs to delete.\nReturns: The results of the deletion.*\n\nsource\n\n\nArchivematicaAPIClient.ingest_completed\n\n ArchivematicaAPIClient.ingest_completed ()\n\n*Checks for completed ingestions.\nReturns: The list of completed ingestions.*\n\n\n\nStorage Service\n\nsource\n\nArchivematicaAPIClient.v2_file\n\n ArchivematicaAPIClient.v2_file (size:int=20)\n\n*Retrieves a list of files.\nArgs: size: The number of files to retrieve.\nReturns: The list of files.*\n\nsource\n\n\nArchivematicaAPIClient.v2_file_delete_aip\n\n ArchivematicaAPIClient.v2_file_delete_aip (file_UUIDs:list,\n                                            event_reason:str,\n                                            pipeline:str, user_id:str,\n                                            user_email:str)\n\n*Deletes the specified files.\nArgs: file_UUIDs: The list of file UUIDs to delete. event_reason: The reason for the deletion. pipeline: The pipeline for the deletion. user_id: The user ID for the deletion. user_email: The user email for the deletion.\nReturns: The results of the deletion.*\n\nsource\n\n\nArchivematicaAPIClient.v2_file_delete\n\n ArchivematicaAPIClient.v2_file_delete (file_UUIDs:list)\n\n*Deletes the specified files.\nArgs: file_UUIDs: The list of file UUIDs to delete.\nReturns: The results of the deletion.*\n\nsource\n\n\nArchivematicaAPIClient.get_aip_url\n\n ArchivematicaAPIClient.get_aip_url (ingest_UUID:str)\n\n*Constructs and returns the URL for downloading the ingested AIP.\nArgs: ingest_UUID: The UUID of the ingested AIP.\nReturns: The URL for downloading the AIP.*\n\nsource\n\n\nArchivematicaAPIClient.get_current_full_path\n\n ArchivematicaAPIClient.get_current_full_path (ingest_UUID:str)\n\n*Retrieves the current full path of the ingested AIP by making an API call.\nArgs: ingest_UUID (str): The UUID of the ingested AIP.\nReturns: Optional[str]: The current full path of the AIP if the request is successful, None otherwise.*",
    "crumbs": [
      "Archivematica API client"
    ]
  },
  {
    "objectID": "task.html",
    "href": "task.html",
    "title": "Task",
    "section": "",
    "text": "source\n\nTask\n\n Task (dashboard_url:str, dashboard_username:str, dashboard_api_key:str,\n       storage_service_url:str, storage_service_username:str,\n       storage_service_password:str, aws_access_key_id:str,\n       aws_secret_access_key:str, aws_region:str)\n\n*Constructor for the Task class. Initializes the Matica API client and the AWS S3 client.\nArgs: dashboard_url (str): URL for the Matica dashboard. dashboard_username (str): Username for the Matica dashboard. dashboard_api_key (str): API key for the Matica dashboard. storage_service_url (str): URL for the storage service. storage_service_username (str): Username for the storage service. storage_service_password (str): Password for the storage service. aws_access_key_id (str): AWS access key ID. aws_secret_access_key (str): AWS secret access key. aws_region (str): AWS region.*\n\n\nMain\n\nsource\n\nTask.main\n\n Task.main (dashboard_url:str, dashboard_username:str,\n            dashboard_api_key:str, storage_service_url:str,\n            storage_service_username:str, storage_service_password:str,\n            aws_access_key_id:str, aws_secret_access_key:str, task_id:str,\n            transfer_type:str, transfer_name:str, file_path:str,\n            location_uuid:str, processing_config:str, bucket_name:str,\n            transfer_source_prefix:str, aws_region:str)\n\n*Executes the main process. Uploads a ZIP file to S3, then triggers processing in Matica.\nArgs: The following arguments are similar to those in the init method. task_id (str): Task ID. transfer_type (str): Transfer type. transfer_name (str): Transfer name. file_path (str): File path. location_uuid (str): Location UUID. processing_config (str): Processing configuration. bucket_name (str): Bucket name. transfer_source_prefix (str): Transfer source prefix. aws_region (str): AWS region.\nReturns: Optional[str]: The URL of the processed file if successful, None otherwise.*",
    "crumbs": [
      "Task"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Archivematica Tools",
    "section": "",
    "text": "pip install archivematica_tools",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Archivematica Tools",
    "section": "",
    "text": "pip install archivematica_tools",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Archivematica Tools",
    "section": "How to use",
    "text": "How to use\nSee the documentation for full details of the Archivematica API Client.\n\nfrom dotenv import load_dotenv\nimport os\n\n\nload_dotenv(override=True)\n\ndashboard_url = os.environ.get(\"DASHBOARD_URL\")\ndashboard_username = os.environ.get(\"DASHBOARD_USERNAME\")\ndashboard_api_key = os.environ.get(\"DASHBOARD_API_KEY\")\n\nstorage_service_url = os.environ.get(\"STORAGE_SERVICE_URL\")\nstorage_service_username = os.environ.get(\"STORAGE_SERVICE_USERNAME\")\nstorage_service_password = os.environ.get(\"STORAGE_SERVICE_PASSWORD\")\n\n\nclient = ArchivematicaAPIClient(dashboard_url, dashboard_username, dashboard_api_key, storage_service_url, storage_service_username, storage_service_password)",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "index.html#transfer",
    "href": "index.html#transfer",
    "title": "Archivematica Tools",
    "section": "Transfer",
    "text": "Transfer\n\ntransfer_UUID = client.v2beta_package(\"standard\", \"\", \"bfe37714-61c2-432e-b375-af9253e114da\", \"/home/archivematica/archivematica-sampledata/SampleTransfers/DemoTransferCSV\", \"transfer v2 demo\", \"automated\")\ntransfer_UUID\n\n'68a1144e-2689-4b95-9eef-700d90d2e021'\n\n\n\nDelete transfers\n\nres_transfer_completed = client.transfer_completed()\nres_transfer_completed\n\n{'results': ['7bc40fbd-66f4-471c-82e4-e9ef4350cc2a',\n  'e9fd2aac-b612-4d0a-acbc-d28d9559fb00'],\n 'message': 'Fetched completed transfers successfully.'}\n\n\n\nres_transfer_delete = client.transfer_delete(res_transfer_completed[\"results\"])\nres_transfer_delete\n\n[{'removed': True}, {'removed': True}]",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "index.html#ingest",
    "href": "index.html#ingest",
    "title": "Archivematica Tools",
    "section": "Ingest",
    "text": "Ingest\n\nDelete ingests\n\nres_ingest_completed = client.ingest_completed()\nres_ingest_completed\n\n{'results': ['03bb28e6-b2aa-4d7c-acb6-65c31d1c9998',\n  '0ce06558-f2cf-4c12-9b53-d1bdb684ab62',\n  '1460ff24-f7ea-4d94-9463-cfcd8a493a32',\n  '1d7fd234-b7c8-46bf-a8be-c3df890de8c2',\n  '2392fb45-3ada-48b5-b8f1-a8ad0e2f1c51',\n  '2d332284-a175-47b7-97a0-18d8f4f30045',\n  '2d48a73a-bfb6-48da-b723-de2c984751af',\n  '343a91c2-2b16-486a-a485-d239bfaac43f',\n  '373649c7-7a4b-4e4d-ae5d-4ab4f054ac0a',\n  '3f0d4caa-2191-4e5c-b140-0d07b2df0892',\n  '40297da5-2dee-4bb0-b886-1bd509c03d23',\n  '4253e2e3-60f9-4556-8a39-f55efce36c3a',\n  '603e0080-8c7b-431d-9820-08f613ebc105',\n  '6f655f81-fac9-4d47-8243-e4af61058404',\n  '769769f2-ccd4-4972-930e-5eb4f927f060',\n  '864ae4d5-c50d-4bde-a657-e28153f48ba2',\n  '9a659c99-1c0e-4110-9aec-73e2e698e7f0',\n  '9a668767-bb61-4d59-bc15-0bac33bc0ef8',\n  'ac3e20c5-fd43-4f3d-abe8-e1069cbd2ac7',\n  'b36dca11-9501-4f84-a852-4f8d6466ee4d',\n  'b389e77a-2153-457d-bbf9-b2c4d755be88',\n  'b3b8da80-91d1-46ce-a56c-1a8bd8497999',\n  'b908c135-c07a-439e-8e69-eace35f4052e',\n  'bd35939f-a1c1-43eb-aebc-33b29d325831',\n  'c03eaaf2-e5ac-4ea8-9aba-b2b92c2efcd5',\n  'cb866630-e444-47c6-b94c-662e8849f6da',\n  'd1fbe8ec-b050-449f-b6d1-99e30397bea9',\n  'd648478a-4960-4568-96cb-57669d7c10d0',\n  'dabb707d-e860-45f5-a388-5f1291af8d73',\n  'e38b64d7-1386-4032-97a9-faacf945495b',\n  'e4278795-32f7-4aa9-b150-e354efae03f1',\n  'e5e48d8a-421a-461d-8e55-468bf37253a8',\n  'f5495cf3-d86b-4e63-8554-841f636cfda3',\n  'f6decddd-2af3-4b22-82b7-b8a5d8eaefa2',\n  'f9eb5641-cb65-4af7-8e0e-3d9958a6f098'],\n 'message': 'Fetched completed ingests successfully.'}\n\n\n\nres_ingest_delete = client.ingest_delete(res_ingest_completed[\"results\"])\nres_ingest_delete\n\n[{'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True},\n {'removed': True}]",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "index.html#storage-service",
    "href": "index.html#storage-service",
    "title": "Archivematica Tools",
    "section": "Storage Service",
    "text": "Storage Service\n\nPackage\n\nres_v2_file = client.v2_file(size=1)\nres_v2_file\n\n{'meta': {'limit': 1,\n  'next': '/api/v2/file/?limit=1&offset=1',\n  'offset': 0,\n  'previous': None,\n  'total_count': 61},\n 'objects': [{'current_full_path': '/aip_storage/4165/45e4/ab5e/4488/90e6/fe34/f624/2cbe/Japanse_Example-416545e4-ab5e-4488-90e6-fe34f6242cbe.7z',\n   'current_location': '/api/v2/location/3a68b7d6-d9ce-4f83-9772-d66560f2bb8c/',\n   'current_path': '4165/45e4/ab5e/4488/90e6/fe34/f624/2cbe/Japanse_Example-416545e4-ab5e-4488-90e6-fe34f6242cbe.7z',\n   'encrypted': False,\n   'misc_attributes': {},\n   'origin_pipeline': '/api/v2/pipeline/342468f7-17ca-440a-bcb2-fd594795db8f/',\n   'package_type': 'AIP',\n   'related_packages': [],\n   'replicas': [],\n   'replicated_package': None,\n   'resource_uri': '/api/v2/file/416545e4-ab5e-4488-90e6-fe34f6242cbe/',\n   'size': 64921,\n   'status': 'UPLOADED',\n   'stored_date': '2024-06-18T23:09:26.471782',\n   'uuid': '416545e4-ab5e-4488-90e6-fe34f6242cbe'}]}\n\n\n\npipeline = \"628f82bd-4ec2-4643-b85d-fd8e1db84c27\"\nuser_id = 1\nuser_email = \"test@test.com\"\nevent_reason = \"demo\"\n\n\nfileUUIDs = []\nfor objct in res_v2_file[\"objects\"]:\n    fileUUIDs.append(objct[\"uuid\"])\n\nres_v2_file_delete = client.v2_file_delete_aip(fileUUIDs, event_reason, pipeline, user_id, user_email)\nres_v2_file_delete\n\n100%|██████████| 1/1 [00:00&lt;00:00,  1.89it/s]\n\n\n[{'error_message': 'Pipeline matching query does not exist.',\n  'traceback': 'Traceback (most recent call last):\\n\\n  File \"/pyenv/data/versions/3.9.20/lib/python3.9/site-packages/tastypie/resources.py\", line 221, in wrapper\\n    response = callback(request, *args, **kwargs)\\n\\n  File \"/src/storage_service/locations/api/resources.py\", line 194, in wrapper\\n    result = func(resource, request, bundle, **kwargs)\\n\\n  File \"/src/storage_service/locations/api/resources.py\", line 1250, in delete_aip_request\\n    (status_code, response) = self._attempt_package_request_event(\\n\\n  File \"/src/storage_service/locations/api/resources.py\", line 1776, in _attempt_package_request_event\\n    pipeline = Pipeline.objects.get(uuid=request_info[\"pipeline\"])\\n\\n  File \"/pyenv/data/versions/3.9.20/lib/python3.9/site-packages/django/db/models/manager.py\", line 87, in manager_method\\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\\n\\n  File \"/pyenv/data/versions/3.9.20/lib/python3.9/site-packages/django/db/models/query.py\", line 637, in get\\n    raise self.model.DoesNotExist(\\n\\nlocations.models.pipeline.Pipeline.DoesNotExist: Pipeline matching query does not exist.\\n'}]\n\n\n\nfileUUIDs = []\nfor objct in res_v2_file[\"objects\"]:\n    fileUUIDs.append(objct[\"uuid\"])\n\nres_v2_file_delete = client.v2_file_delete(fileUUIDs)\nres_v2_file_delete\n\n100%|██████████| 1/1 [00:00&lt;00:00,  1.48it/s]\n\n\n[{'file_UUID': '416545e4-ab5e-4488-90e6-fe34f6242cbe', 'status': 'success'}]\n\n\nSee the documentation for more examples.\n\nCreated by Satoru Nakamura.",
    "crumbs": [
      "Archivematica Tools"
    ]
  },
  {
    "objectID": "aws.html",
    "href": "aws.html",
    "title": "AWS Tools",
    "section": "",
    "text": "source\n\nAwsClient\n\n AwsClient (aws_access_key_id:str, aws_secret_access_key:str,\n            region_name:str)\n\nA client for interacting with AWS services, specifically for operations related to Amazon S3.\n\n\nUpload\n\nsource\n\nAwsClient.upload_to_s3\n\n AwsClient.upload_to_s3 (file_path:str, bucket_name:str, object_name:str)\n\n*Uploads a file to an Amazon S3 bucket.\nArgs: file_path (str): Local path to the file. bucket_name (str): Name of the S3 bucket. object_name (str): Object name in the S3 bucket (i.e., S3 key).*\n\n\n\nZip\n\nsource\n\nAwsClient.extract_zip_with_correct_encoding\n\n AwsClient.extract_zip_with_correct_encoding (zip_file_path:str,\n                                              extract_to_path:str,\n                                              encoding:str='cp437')\n\n*Extracts a ZIP file with specific encoding for the file names.\nArgs: zip_file_path (str): Path to the ZIP file. extract_to_path (str): Path to extract the ZIP contents to. encoding (str, optional): Encoding to use for file names. Defaults to ‘cp437’.*\n\nsource\n\n\nAwsClient.upload_to_s3_zip\n\n AwsClient.upload_to_s3_zip (zip_file_path:str, dst_path:str,\n                             bucket_name:str)\n\n*Extracts a ZIP file and uploads its contents to an Amazon S3 bucket.\nArgs: zip_file_path (str): Path to the ZIP file. dst_path (str): Destination path in the S3 bucket. bucket_name (str): Name of the S3 bucket.*",
    "crumbs": [
      "AWS Tools"
    ]
  }
]